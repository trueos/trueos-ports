Regressed by https://github.com/boostorg/date_time/commit/f9f2aaf5216c

src/cpp/core/DateTime.cpp:68:26: error: no matching conversion for functional-style cast from 'double' to 'boost::posix_time::seconds'
   return time_t_epoch + seconds(sec);
                         ^~~~~~~~~~~
src/cpp/core/file_lock/FileLock.cpp:136:34: error: no matching conversion for functional-style cast from 'double' to 'boost::posix_time::seconds'
   FileLock::s_timeoutInterval = boost::posix_time::seconds(timeoutInterval);
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/cpp/core/file_lock/FileLock.cpp:140:30: error: no matching conversion for functional-style cast from 'double' to 'boost::posix_time::seconds'
   FileLock::s_refreshRate = boost::posix_time::seconds(refreshRate);
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/cpp/core/file_lock/FileLock.cpp:215:38: error: no matching constructor for initialization of 'boost::posix_time::seconds'
boost::posix_time::seconds FileLock::s_timeoutInterval(kDefaultTimeoutInterval);
                                     ^                 ~~~~~~~~~~~~~~~~~~~~~~~
src/cpp/core/file_lock/FileLock.cpp:216:38: error: no matching constructor for initialization of 'boost::posix_time::seconds'
boost::posix_time::seconds FileLock::s_refreshRate(kDefaultRefreshRate);
                                     ^             ~~~~~~~~~~~~~~~~~~~
/usr/local/include/boost/date_time/posix_time/posix_time_duration.hpp:53:30: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'double' to 'const boost::posix_time::seconds' for 1st argument
  class BOOST_SYMBOL_VISIBLE seconds : public time_duration
                             ^
/usr/local/include/boost/date_time/posix_time/posix_time_duration.hpp:58:37: note: candidate template ignored: disabled by 'enable_if' [with T = double]
          typename boost::enable_if<boost::is_integral<T>, void>::type* = 0) :
                                    ^

--- src/cpp/core/DateTime.cpp.orig	2018-04-16 22:26:34 UTC
+++ src/cpp/core/DateTime.cpp
@@ -65,7 +65,7 @@ boost::posix_time::ptime timeFromSecondsSinceEpoch(dou
    using namespace boost::posix_time;
 
    ptime time_t_epoch(date(1970,1,1));
-   return time_t_epoch + seconds(sec);
+   return time_t_epoch + seconds(long(sec));
 }
 
 boost::posix_time::ptime timeFromMillisecondsSinceEpoch(int64_t ms)
--- src/cpp/core/file_lock/FileLock.cpp.orig	2018-04-16 22:26:34 UTC
+++ src/cpp/core/file_lock/FileLock.cpp
@@ -46,8 +46,8 @@ const char * const kLockTypeLinkBased = "linkbased";
 #endif 
 
 const char * const kLocksConfPath    = "/etc/rstudio/file-locks";
-const double kDefaultRefreshRate     = 20.0;
-const double kDefaultTimeoutInterval = 30.0;
+const long kDefaultRefreshRate       = 20;
+const long kDefaultTimeoutInterval   = 30;
 
 std::string lockTypeToString(FileLock::LockType type)
 {
@@ -132,11 +132,11 @@ void FileLock::initialize(const Settings& settings)
    FileLock::s_defaultType = stringToLockType(settings.get("lock-type", kLockTypeDefault));
 
    // timeout interval
-   double timeoutInterval = getFieldPositive(settings, "timeout-interval", kDefaultTimeoutInterval);
+   long timeoutInterval = getFieldPositive(settings, "timeout-interval", kDefaultTimeoutInterval);
    FileLock::s_timeoutInterval = boost::posix_time::seconds(timeoutInterval);
    
    // refresh rate
-   double refreshRate = getFieldPositive(settings, "refresh-rate", kDefaultRefreshRate);
+   long refreshRate = getFieldPositive(settings, "refresh-rate", kDefaultRefreshRate);
    FileLock::s_refreshRate = boost::posix_time::seconds(refreshRate);
    
    // logging
