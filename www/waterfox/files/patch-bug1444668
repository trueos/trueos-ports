commit cd8b6897bc4b
Author: Jan de Mooij <jdemooij@mozilla.com>
Date:   Tue Apr 10 15:00:49 2018 +0200

    Bug 1444668 - Avoid allocating large AssemblerBuffers. r=luke, r=bbouvier, a=RyanVM
    
    --HG--
    extra : source : d4aad468062493810bdc58e6a18f7322d59d4066
---
 js/src/jit/MacroAssembler.cpp                      |  6 ++++
 js/src/jit/shared/IonAssemblerBuffer.h             | 12 +++-----
 js/src/jit/x86-shared/AssemblerBuffer-x86-shared.h | 32 +++++++++++++++++++++-
 3 files changed, 41 insertions(+), 9 deletions(-)

diff --git js/src/jit/MacroAssembler.cpp js/src/jit/MacroAssembler.cpp
index bf6d47bebfa0..fed23892021a 100644
--- js/src/jit/MacroAssembler.cpp
+++ js/src/jit/MacroAssembler.cpp
@@ -2677,6 +2677,12 @@ MacroAssembler::finish()
     }
 
     MacroAssemblerSpecific::finish();
+
+    MOZ_RELEASE_ASSERT(size() <= MaxCodeBytesPerProcess,
+                       "AssemblerBuffer should ensure we don't exceed MaxCodeBytesPerProcess");
+
+    if (bytesNeeded() > MaxCodeBytesPerProcess)
+        setOOM();
 }
 
 void
diff --git js/src/jit/shared/IonAssemblerBuffer.h js/src/jit/shared/IonAssemblerBuffer.h
index b37b7518fdb6..6d4bf405b5ca 100644
--- js/src/jit/shared/IonAssemblerBuffer.h
+++ js/src/jit/shared/IonAssemblerBuffer.h
@@ -189,6 +189,10 @@ class AssemblerBuffer
 
   protected:
     virtual Slice* newSlice(LifoAlloc& a) {
+        if (size() > MaxCodeBytesPerProcess - sizeof(Slice)) {
+            fail_oom();
+            return nullptr;
+        }
         Slice* tmp = static_cast<Slice*>(a.alloc(sizeof(Slice)));
         if (!tmp) {
             fail_oom();
@@ -298,6 +297,9 @@ class AssemblerBuffer
             return bufferSize + tail->length();
         return bufferSize;
     }
+    BufferOffset nextOffset() const {
+        return BufferOffset(size());
+    }
 
     bool oom() const { return m_oom || m_bail; }
     bool bail() const { return m_bail; }
@@ -413,12 +415,6 @@ class AssemblerBuffer
         return getInstBackwards(off, prev, bufferSize - prev->length());
     }
 
-    BufferOffset nextOffset() const {
-        if (tail)
-            return BufferOffset(bufferSize + tail->length());
-        return BufferOffset(bufferSize);
-    }
-
     typedef AssemblerBuffer<SliceSize, Inst> ThisClass;
 
     class AssemblerBufferInstIterator
diff --git js/src/jit/x86-shared/AssemblerBuffer-x86-shared.h js/src/jit/x86-shared/AssemblerBuffer-x86-shared.h
index fa921d91db26..f9a6f5a3ea50 100644
--- js/src/jit/x86-shared/AssemblerBuffer-x86-shared.h
+++ js/src/jit/x86-shared/AssemblerBuffer-x86-shared.h
@@ -67,6 +67,33 @@ namespace js {
 
 namespace jit {
 
+    // AllocPolicy for AssemblerBuffer. OOMs when trying to allocate more than
+    // MaxCodeBytesPerProcess bytes. Use private inheritance to make sure we
+    // explicitly have to expose SystemAllocPolicy methods.
+    class AssemblerBufferAllocPolicy : private SystemAllocPolicy
+    {
+      public:
+        using SystemAllocPolicy::checkSimulatedOOM;
+        using SystemAllocPolicy::reportAllocOverflow;
+        using SystemAllocPolicy::free_;
+
+        template <typename T> T* pod_realloc(T* p, size_t oldSize, size_t newSize) {
+            static_assert(sizeof(T) == 1,
+                          "AssemblerBufferAllocPolicy should only be used with byte vectors");
+            MOZ_ASSERT(oldSize <= MaxCodeBytesPerProcess);
+            if (MOZ_UNLIKELY(newSize > MaxCodeBytesPerProcess))
+                return nullptr;
+            return SystemAllocPolicy::pod_realloc<T>(p, oldSize, newSize);
+        }
+        template <typename T> T* pod_malloc(size_t numElems) {
+            static_assert(sizeof(T) == 1,
+                          "AssemblerBufferAllocPolicy should only be used with byte vectors");
+            if (MOZ_UNLIKELY(numElems > MaxCodeBytesPerProcess))
+                return nullptr;
+            return SystemAllocPolicy::pod_malloc<T>(numElems);
+        }
+    };
+
     class AssemblerBuffer
     {
         template<size_t size, typename T>
@@ -87,6 +114,9 @@ namespace jit {
 
         void ensureSpace(size_t space)
         {
+            // This should only be called with small |space| values to ensure
+            // we don't overflow below.
+            MOZ_ASSERT(space <= 16);
             if (MOZ_UNLIKELY(!m_buffer.reserve(m_buffer.length() + space)))
                 oomDetected();
         }
@@ -164,7 +194,7 @@ namespace jit {
             m_buffer.clear();
         }
 
-        mozilla::Vector<unsigned char, 256, SystemAllocPolicy> m_buffer;
+        mozilla::Vector<unsigned char, 256, AssemblerBufferAllocPolicy> m_buffer;
         bool m_oom;
     };
 
